// +build ignore

package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	"github.com/andrewarchi/gocipher/ngrams"
)

const header = `// Code generated by generate_monograms. DO NOT EDIT.

package ngrams

// Alphabets for various languages.
const (
`

const freqsDoc = `)

// Letter frequencies for various languages.
// Positions correspond to letters in the alphabet.
var (
`

func main() {
	files, err := ioutil.ReadDir("testdata")
	if err != nil {
		die(err)
	}
	of, err := os.Create("tables.go")
	if err != nil {
		die(err)
	}
	defer of.Close()

	var langs []string
	var sets []*ngrams.NgramSet
	for _, fi := range files {
		filename := fi.Name()
		if !strings.HasSuffix(filename, "_1.txt") {
			continue
		}
		lang := filename[:len(filename)-len("_1.txt")]
		set, err := ngrams.LoadNgramsFile(lang, 1)
		if err != nil {
			die(err)
		}
		langs = append(langs, strings.ToUpper(lang))
		sets = append(sets, set)
	}

	buf := bufio.NewWriter(of)
	buf.WriteString(header)
	for i, set := range sets {
		fmt.Fprintf(buf, "\tAlpha%s = \"", langs[i])
		for _, ngram := range set.Set {
			buf.WriteString(ngram.Chars)
		}
		buf.WriteString("\"\n")
	}

	buf.WriteString(freqsDoc)
	for _, lang := range langs {
		fmt.Fprintf(buf, "\tFreqs%s = freqs%s\n", lang, lang)
	}

	buf.WriteString(")\n\n")
	for i, set := range sets {
		fmt.Fprintf(buf, "var freqs%s = []float64{", langs[i])
		for i, ngram := range set.Set {
			if i%5 == 0 {
				buf.WriteString("\n\t")
			} else {
				buf.WriteByte(' ')
			}
			fmt.Fprintf(buf, "%g,", float64(ngram.Count)/float64(set.TotalCount))
		}
		buf.WriteString("\n}\n\n")
	}
	buf.WriteString(")\n")

	err = buf.Flush()
	if err != nil {
		die(err)
	}
}

func die(err error) {
	fmt.Fprintln(os.Stderr, err)
	os.Exit(1)
}
